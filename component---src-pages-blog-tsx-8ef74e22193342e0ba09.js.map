{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./src/components/section.tsx","webpack:///./src/components/post-list.tsx"],"names":["pageQuery","Blog","data","location","posts","allMdx","nodes","title","href","map","post","key","fields","slug","to","itemProp","SectionTitle","styled","h2","theme","fontSize","fonts","serif","colors","primary","SectionDescription","p","spacing","primaryLight","complementary","Header","header","Headline","Dateline","Section","section","Description","Thumbnail","div","breakpoints","tablet_portrait","Content","full","Article","article","text","backgroundLight","background","textLight","PostListItem","frontmatter","featuredImage","getImage","featured","itemScope","itemType","undefined","image","alt","date","dangerouslySetInnerHTML","__html","description","excerpt","PostList","ol"],"mappings":"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","file":"component---src-pages-blog-tsx-8ef74e22193342e0ba09.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql, PageProps } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport { MdxNode } from \"../common/types\";\nimport { SectionDescription, SectionTitle } from \"../components/section\";\nimport { PostList, PostListItem } from \"../components/post-list\";\n\nconst pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/blog/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n        timeToRead\n      }\n    }\n  }\n`;\n\ninterface Props extends PageProps {\n  data: {\n    allMdx: {\n      nodes: MdxNode[];\n    };\n    site: {\n      siteMetadata: {\n        title: string;\n      };\n    };\n  };\n}\n\n// TODO: compact/archive view\nconst Blog = ({ data, location }: Props) => {\n  const posts = data.allMdx.nodes;\n\n  return (\n    <Layout location={location}>\n      <SEO title=\"Blog\" />\n      <SectionTitle>Blog</SectionTitle>\n      <SectionDescription>\n        I sometimes write about programming and software development. The RSS\n        feed for this blog is <a href=\"/rss.xml\">here</a>.\n      </SectionDescription>\n      <PostList>\n        {posts.map((post: MdxNode) => (\n          <li key={post.fields.slug}>\n            <Link to={`/blog${post.fields.slug}`} itemProp=\"url\">\n              <PostListItem post={post} />\n            </Link>\n          </li>\n        ))}\n      </PostList>\n    </Layout>\n  );\n};\n\nexport { Blog as default, pageQuery };\n","import styled from \"styled-components\";\n\nconst SectionTitle = styled.h2`\n  font-size: ${({theme}) => theme.fontSize[5]};\n  font-family: ${({theme}) => theme.fonts.serif};\n  font-weight: lighter;\n  color: ${({theme}) => theme.colors.primary};\n  margin: 0;\n`;\n\nconst SectionDescription = styled.p`\n  font-size: ${({theme}) => theme.fontSize[2]};\n  margin-bottom: ${({theme}) => theme.spacing[14]};\n\n  a {\n    color: ${({ theme }) => theme.colors.primary};\n\n    border-bottom-style: dotted;\n    border-bottom-width: 2px;\n    border-bottom-color: ${({ theme }) => theme.colors.primary};\n\n    :hover,\n    :focus {\n      color: ${({ theme }) => theme.colors.primaryLight};\n\n      border-bottom-style: solid;\n      border-bottom-width: 3px;\n      border-bottom-color: ${({ theme }) => theme.colors.complementary};\n    }\n  }\n`;\n\nexport { SectionTitle, SectionDescription };\n","import React from \"react\";\n\nimport styled from \"styled-components\";\nimport Img from \"gatsby-image\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport { MdxNode } from \"../common/types\";\nimport theme from \"../styles/theme\";\n\nconst Header = styled.header`\n  margin-bottom: ${({ theme }) => theme.spacing[4]};\n`;\n\nconst Headline = styled.h2`\n  font-family: ${({ theme }) => theme.fonts.serif};\n  font-size: ${({ theme }) => theme.fontSize[3]};\n  font-weight: lighter;\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: ${({ theme }) => theme.spacing[1]};\n  margin-top: 0;\n`;\n\nconst Dateline = styled.p`\n  font-family: ${({ theme }) => theme.fonts.serif};\n  font-size: ${({ theme }) => theme.fontSize[0]};\n`;\n\nconst Section = styled.section`\n  margin-bottom: 0;\n`;\n\nconst Description = styled.p``;\n\nconst Thumbnail = styled.div`\n  margin-right: ${({ theme }) => theme.spacing[0]};\n  margin-bottom: ${({ theme }) => theme.spacing[4]};\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet_portrait}) {\n    margin-right: ${({ theme }) => theme.spacing[4]};\n    margin-bottom: ${({ theme }) => theme.spacing[0]};\n  }\n  flex-basis: 40%;\n`;\n\nconst Content = styled.div<ContentProps>`\n  flex-basis: ${({ full }) => full ? '100%' : '60%' }\n`;\n\nconst Article = styled.article`\n  margin-bottom: ${({ theme }) => theme.spacing[4]};\n  margin-top: ${({ theme }) => theme.spacing[4]};\n  padding: ${({ theme }) => theme.spacing[4]};\n  border-radius: 4px;\n  color: ${({ theme }) => theme.colors.text};\n\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet_portrait}) {\n    flex-direction: row;\n  }\n\n  transition: background-color 0.1s;\n\n  background-color: ${({ theme }) => theme.colors.backgroundLight};\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet_portrait}) {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n\n  // x:hover and x :hover are not the same.\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.backgroundLight};\n    ${Headline} {\n      color: ${({ theme }) => theme.colors.primaryLight};\n    }\n    ${Dateline} {\n      color: ${({ theme }) => theme.colors.textLight};\n    }\n    ${Description} {\n      color: ${({ theme }) => theme.colors.textLight};\n    }\n  }\n`;\n\ninterface ContentProps {\n  full: boolean;\n}\n\ninterface Props {\n  post: MdxNode;\n}\n\nconst PostListItem = ({ post }: Props) => {\n  const title = post.frontmatter.title || post.fields.slug;\n  const featuredImage = getImage(post.frontmatter.featured);\n  return (\n    <Article itemScope itemType=\"http://schema.org/Article\">\n      {\n        post.frontmatter.featured &&\n        featuredImage !== undefined ?\n        <Thumbnail>\n          {/* <Img\n            fluid={post.frontmatter.featured.childImageSharp.fluid}\n            alt={post.frontmatter.title}\n          /> */}\n          <GatsbyImage\n            image={featuredImage}\n            alt={post.frontmatter.title}\n          />\n        </Thumbnail>\n        : null\n      }\n      {/* if there is a thumbnail then content is 60% else 100% width */}\n      <Content full={featuredImage === undefined}>\n        <Header>\n          <Headline>\n            {/* relative link to e.g. /posts/post1-slug/ */}\n            <span itemProp=\"headline\">{title}</span>\n          </Headline>\n          <Dateline>{post.frontmatter.date}</Dateline>\n        </Header>\n        <Section>\n          <Description\n            dangerouslySetInnerHTML={{\n              __html: post.frontmatter.description || post.excerpt,\n            }}\n            itemProp=\"description\"\n          />\n        </Section>\n      </Content>\n    </Article>\n  );\n};\n\nconst PostList = styled.ol`\n  list-style-type: none;\n\n  // remove default margin and padding of list\n  margin: 0;\n  padding: 0;\n`;\n\nexport { PostList, PostListItem };\n\n"],"sourceRoot":""}